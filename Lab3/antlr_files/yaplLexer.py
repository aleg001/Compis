# Generated from yapl.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,45,376,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,1,
        0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
        8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,
        1,14,1,15,1,15,1,16,1,16,1,17,4,17,168,8,17,11,17,12,17,169,1,17,
        1,17,1,18,1,18,1,18,1,18,1,18,5,18,179,8,18,10,18,12,18,182,9,18,
        1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,5,19,193,8,19,10,19,
        12,19,196,9,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,
        1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,
        1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,
        1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,
        1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,
        1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,
        1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,1,36,1,36,
        1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,5,39,
        298,8,39,10,39,12,39,301,9,39,1,39,1,39,1,40,4,40,306,8,40,11,40,
        12,40,307,1,41,1,41,5,41,312,8,41,10,41,12,41,315,9,41,1,42,1,42,
        5,42,319,8,42,10,42,12,42,322,9,42,1,43,1,43,1,43,1,44,1,44,1,44,
        1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,
        1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,
        1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,62,3,62,367,
        8,62,1,63,1,63,1,63,1,63,1,63,1,63,1,64,1,64,2,180,194,0,65,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
        73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,0,93,0,
        95,0,97,0,99,0,101,0,103,0,105,0,107,0,109,0,111,0,113,0,115,0,117,
        0,119,0,121,0,123,0,125,0,127,0,129,0,1,0,25,3,0,9,10,12,13,32,32,
        2,0,34,34,92,92,1,0,48,57,1,0,65,90,4,0,48,57,65,90,95,95,97,122,
        1,0,97,122,2,0,65,65,97,97,2,0,67,67,99,99,2,0,68,68,100,100,2,0,
        69,69,101,101,2,0,70,70,102,102,2,0,72,72,104,104,2,0,73,73,105,
        105,2,0,76,76,108,108,2,0,78,78,110,110,2,0,79,79,111,111,2,0,80,
        80,112,112,2,0,82,82,114,114,2,0,83,83,115,115,2,0,84,84,116,116,
        2,0,85,85,117,117,2,0,86,86,118,118,2,0,87,87,119,119,8,0,34,34,
        47,47,92,92,98,98,102,102,110,110,114,114,116,116,3,0,48,57,65,70,
        97,102,365,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
        0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
        0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
        0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,
        0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,
        0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,
        0,0,0,1,131,1,0,0,0,3,133,1,0,0,0,5,135,1,0,0,0,7,137,1,0,0,0,9,
        139,1,0,0,0,11,141,1,0,0,0,13,143,1,0,0,0,15,145,1,0,0,0,17,147,
        1,0,0,0,19,149,1,0,0,0,21,151,1,0,0,0,23,153,1,0,0,0,25,155,1,0,
        0,0,27,157,1,0,0,0,29,159,1,0,0,0,31,162,1,0,0,0,33,164,1,0,0,0,
        35,167,1,0,0,0,37,173,1,0,0,0,39,188,1,0,0,0,41,201,1,0,0,0,43,207,
        1,0,0,0,45,212,1,0,0,0,47,218,1,0,0,0,49,221,1,0,0,0,51,224,1,0,
        0,0,53,227,1,0,0,0,55,236,1,0,0,0,57,243,1,0,0,0,59,247,1,0,0,0,
        61,252,1,0,0,0,63,257,1,0,0,0,65,262,1,0,0,0,67,268,1,0,0,0,69,273,
        1,0,0,0,71,278,1,0,0,0,73,282,1,0,0,0,75,285,1,0,0,0,77,289,1,0,
        0,0,79,294,1,0,0,0,81,305,1,0,0,0,83,309,1,0,0,0,85,316,1,0,0,0,
        87,323,1,0,0,0,89,326,1,0,0,0,91,329,1,0,0,0,93,331,1,0,0,0,95,333,
        1,0,0,0,97,335,1,0,0,0,99,337,1,0,0,0,101,339,1,0,0,0,103,341,1,
        0,0,0,105,343,1,0,0,0,107,345,1,0,0,0,109,347,1,0,0,0,111,349,1,
        0,0,0,113,351,1,0,0,0,115,353,1,0,0,0,117,355,1,0,0,0,119,357,1,
        0,0,0,121,359,1,0,0,0,123,361,1,0,0,0,125,363,1,0,0,0,127,368,1,
        0,0,0,129,374,1,0,0,0,131,132,5,59,0,0,132,2,1,0,0,0,133,134,5,123,
        0,0,134,4,1,0,0,0,135,136,5,125,0,0,136,6,1,0,0,0,137,138,5,40,0,
        0,138,8,1,0,0,0,139,140,5,44,0,0,140,10,1,0,0,0,141,142,5,41,0,0,
        142,12,1,0,0,0,143,144,5,58,0,0,144,14,1,0,0,0,145,146,5,64,0,0,
        146,16,1,0,0,0,147,148,5,46,0,0,148,18,1,0,0,0,149,150,5,126,0,0,
        150,20,1,0,0,0,151,152,5,42,0,0,152,22,1,0,0,0,153,154,5,47,0,0,
        154,24,1,0,0,0,155,156,5,43,0,0,156,26,1,0,0,0,157,158,5,45,0,0,
        158,28,1,0,0,0,159,160,5,60,0,0,160,161,5,61,0,0,161,30,1,0,0,0,
        162,163,5,60,0,0,163,32,1,0,0,0,164,165,5,61,0,0,165,34,1,0,0,0,
        166,168,7,0,0,0,167,166,1,0,0,0,168,169,1,0,0,0,169,167,1,0,0,0,
        169,170,1,0,0,0,170,171,1,0,0,0,171,172,6,17,0,0,172,36,1,0,0,0,
        173,174,5,40,0,0,174,175,5,42,0,0,175,180,1,0,0,0,176,179,3,37,18,
        0,177,179,9,0,0,0,178,176,1,0,0,0,178,177,1,0,0,0,179,182,1,0,0,
        0,180,181,1,0,0,0,180,178,1,0,0,0,181,183,1,0,0,0,182,180,1,0,0,
        0,183,184,5,42,0,0,184,185,5,41,0,0,185,186,1,0,0,0,186,187,6,18,
        1,0,187,38,1,0,0,0,188,189,5,45,0,0,189,190,5,45,0,0,190,194,1,0,
        0,0,191,193,9,0,0,0,192,191,1,0,0,0,193,196,1,0,0,0,194,195,1,0,
        0,0,194,192,1,0,0,0,195,197,1,0,0,0,196,194,1,0,0,0,197,198,5,10,
        0,0,198,199,1,0,0,0,199,200,6,19,1,0,200,40,1,0,0,0,201,202,3,93,
        46,0,202,203,3,105,52,0,203,204,3,91,45,0,204,205,3,115,57,0,205,
        206,3,115,57,0,206,42,1,0,0,0,207,208,3,97,48,0,208,209,3,105,52,
        0,209,210,3,115,57,0,210,211,3,97,48,0,211,44,1,0,0,0,212,213,5,
        102,0,0,213,214,3,91,45,0,214,215,3,105,52,0,215,216,3,115,57,0,
        216,217,3,97,48,0,217,46,1,0,0,0,218,219,3,99,49,0,219,220,3,103,
        51,0,220,48,1,0,0,0,221,222,3,103,51,0,222,223,3,99,49,0,223,50,
        1,0,0,0,224,225,3,103,51,0,225,226,3,107,53,0,226,52,1,0,0,0,227,
        228,3,103,51,0,228,229,3,107,53,0,229,230,3,101,50,0,230,231,3,97,
        48,0,231,232,3,113,56,0,232,233,3,103,51,0,233,234,3,117,58,0,234,
        235,3,115,57,0,235,54,1,0,0,0,236,237,3,103,51,0,237,238,3,115,57,
        0,238,239,3,121,60,0,239,240,3,109,54,0,240,241,3,103,51,0,241,242,
        3,95,47,0,242,56,1,0,0,0,243,244,3,105,52,0,244,245,3,97,48,0,245,
        246,3,117,58,0,246,58,1,0,0,0,247,248,3,105,52,0,248,249,3,109,54,
        0,249,250,3,109,54,0,250,251,3,111,55,0,251,60,1,0,0,0,252,253,3,
        111,55,0,253,254,3,109,54,0,254,255,3,109,54,0,255,256,3,105,52,
        0,256,62,1,0,0,0,257,258,3,117,58,0,258,259,3,101,50,0,259,260,3,
        97,48,0,260,261,3,107,53,0,261,64,1,0,0,0,262,263,3,123,61,0,263,
        264,3,101,50,0,264,265,3,103,51,0,265,266,3,105,52,0,266,267,3,97,
        48,0,267,66,1,0,0,0,268,269,3,93,46,0,269,270,3,91,45,0,270,271,
        3,115,57,0,271,272,3,97,48,0,272,68,1,0,0,0,273,274,3,97,48,0,274,
        275,3,115,57,0,275,276,3,91,45,0,276,277,3,93,46,0,277,70,1,0,0,
        0,278,279,3,107,53,0,279,280,3,97,48,0,280,281,3,123,61,0,281,72,
        1,0,0,0,282,283,3,109,54,0,283,284,3,99,49,0,284,74,1,0,0,0,285,
        286,3,107,53,0,286,287,3,109,54,0,287,288,3,117,58,0,288,76,1,0,
        0,0,289,290,5,116,0,0,290,291,3,113,56,0,291,292,3,119,59,0,292,
        293,3,97,48,0,293,78,1,0,0,0,294,299,5,34,0,0,295,298,3,125,62,0,
        296,298,8,1,0,0,297,295,1,0,0,0,297,296,1,0,0,0,298,301,1,0,0,0,
        299,297,1,0,0,0,299,300,1,0,0,0,300,302,1,0,0,0,301,299,1,0,0,0,
        302,303,5,34,0,0,303,80,1,0,0,0,304,306,7,2,0,0,305,304,1,0,0,0,
        306,307,1,0,0,0,307,305,1,0,0,0,307,308,1,0,0,0,308,82,1,0,0,0,309,
        313,7,3,0,0,310,312,7,4,0,0,311,310,1,0,0,0,312,315,1,0,0,0,313,
        311,1,0,0,0,313,314,1,0,0,0,314,84,1,0,0,0,315,313,1,0,0,0,316,320,
        7,5,0,0,317,319,7,4,0,0,318,317,1,0,0,0,319,322,1,0,0,0,320,318,
        1,0,0,0,320,321,1,0,0,0,321,86,1,0,0,0,322,320,1,0,0,0,323,324,5,
        60,0,0,324,325,5,45,0,0,325,88,1,0,0,0,326,327,5,61,0,0,327,328,
        5,62,0,0,328,90,1,0,0,0,329,330,7,6,0,0,330,92,1,0,0,0,331,332,7,
        7,0,0,332,94,1,0,0,0,333,334,7,8,0,0,334,96,1,0,0,0,335,336,7,9,
        0,0,336,98,1,0,0,0,337,338,7,10,0,0,338,100,1,0,0,0,339,340,7,11,
        0,0,340,102,1,0,0,0,341,342,7,12,0,0,342,104,1,0,0,0,343,344,7,13,
        0,0,344,106,1,0,0,0,345,346,7,14,0,0,346,108,1,0,0,0,347,348,7,15,
        0,0,348,110,1,0,0,0,349,350,7,16,0,0,350,112,1,0,0,0,351,352,7,17,
        0,0,352,114,1,0,0,0,353,354,7,18,0,0,354,116,1,0,0,0,355,356,7,19,
        0,0,356,118,1,0,0,0,357,358,7,20,0,0,358,120,1,0,0,0,359,360,7,21,
        0,0,360,122,1,0,0,0,361,362,7,22,0,0,362,124,1,0,0,0,363,366,5,92,
        0,0,364,367,7,23,0,0,365,367,3,127,63,0,366,364,1,0,0,0,366,365,
        1,0,0,0,367,126,1,0,0,0,368,369,5,117,0,0,369,370,3,129,64,0,370,
        371,3,129,64,0,371,372,3,129,64,0,372,373,3,129,64,0,373,128,1,0,
        0,0,374,375,7,24,0,0,375,130,1,0,0,0,11,0,169,178,180,194,297,299,
        307,313,320,366,2,6,0,0,0,1,0
    ]

class yaplLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    WHITESPACE = 18
    BLOCK_COMMENT = 19
    LINE_COMMENT = 20
    CLASS = 21
    ELSE = 22
    FALSE = 23
    FI = 24
    IF = 25
    IN = 26
    INHERITS = 27
    ISVOID = 28
    LET = 29
    LOOP = 30
    POOL = 31
    THEN = 32
    WHILE = 33
    CASE = 34
    ESAC = 35
    NEW = 36
    OF = 37
    NOT = 38
    TRUE = 39
    STRING = 40
    INT = 41
    TYPE = 42
    ID = 43
    ASSIGNMENT = 44
    IMPLY = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'{'", "'}'", "'('", "','", "')'", "':'", "'@'", "'.'", 
            "'~'", "'*'", "'/'", "'+'", "'-'", "'<='", "'<'", "'='", "'<-'", 
            "'=>'" ]

    symbolicNames = [ "<INVALID>",
            "WHITESPACE", "BLOCK_COMMENT", "LINE_COMMENT", "CLASS", "ELSE", 
            "FALSE", "FI", "IF", "IN", "INHERITS", "ISVOID", "LET", "LOOP", 
            "POOL", "THEN", "WHILE", "CASE", "ESAC", "NEW", "OF", "NOT", 
            "TRUE", "STRING", "INT", "TYPE", "ID", "ASSIGNMENT", "IMPLY" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "WHITESPACE", "BLOCK_COMMENT", 
                  "LINE_COMMENT", "CLASS", "ELSE", "FALSE", "FI", "IF", 
                  "IN", "INHERITS", "ISVOID", "LET", "LOOP", "POOL", "THEN", 
                  "WHILE", "CASE", "ESAC", "NEW", "OF", "NOT", "TRUE", "STRING", 
                  "INT", "TYPE", "ID", "ASSIGNMENT", "IMPLY", "A", "C", 
                  "D", "E", "F", "H", "I", "L", "N", "O", "P", "R", "S", 
                  "T", "U", "V", "W", "ESC", "UNICODE", "HEX" ]

    grammarFileName = "yapl.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


